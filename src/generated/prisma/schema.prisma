// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Entities

model Customer {
  id          Int      @id @default(autoincrement())
  auth0Id     String   @unique // Auth0 user identifier :contentReference[oaicite:0]{index=0}
  name        String
  email       String   @unique // Unique per customer :contentReference[oaicite:1]{index=1}
  password    String?
  address     String?
  phoneNumber String?
  createdAt   DateTime @default(now()) // Populated on insert :contentReference[oaicite:2]{index=2}
  updatedAt   DateTime @updatedAt // Updated on each modification :contentReference[oaicite:3]{index=3}

  orders         Order[]
  cart           Cart?
  wishlist       Wishlist?
  reviews        Review[]
  supportTickets CustomerSupportTicket[]
}

model Product {
  id            Int            @id @default(autoincrement())
  sku           String         @unique
  name          String
  price         Float
  stock         Int
  categoryId    Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      Category       @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  inventory     Inventory?
  images        ProductImage[] // Add relation to ProductImage  description   String?
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  orderDate  DateTime    @default(now())
  totalPrice Float
  status     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customer   Customer    @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
  shipment   Shipment?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique
  paymentDate     DateTime @default(now())
  paymentMethod   String
  amount          Float
  stripePaymentId String? // Stripe's unique payment ID
  status          String   @default("pending") // 'pending', 'succeeded', 'failed', etc.
  currency        String   @default("usd")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model Shipment {
  id             Int      @id @default(autoincrement())
  orderId        Int      @unique
  shipmentDate   DateTime
  address        String
  trackingNumber String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  order          Order    @relation(fields: [orderId], references: [id])
}

// Advanced Entities

model Cart {
  id         Int        @id @default(autoincrement())
  customerId Int        @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   Customer   @relation(fields: [customerId], references: [id])
  cartItems  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id            Int            @id @default(autoincrement())
  customerId    Int            @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  customer      Customer       @relation(fields: [customerId], references: [id])
  wishlistItems WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  customerId Int
  rating     Int
  comment    String?
  reviewDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Promotion {
  id                 Int      @id @default(autoincrement())
  code               String   @unique
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Inventory {
  id                Int      @id @default(autoincrement())
  productId         Int      @unique
  quantity          Int
  warehouseLocation String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  product           Product  @relation(fields: [productId], references: [id])
}

model CustomerSupportTicket {
  id         Int      @id @default(autoincrement())
  customerId Int
  subject    String
  message    String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
}

model UserRole {
  id          Int      @id @default(autoincrement())
  roleName    String
  permissions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
